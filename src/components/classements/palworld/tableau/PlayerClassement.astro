---
import PlayerClassementReactComposant from './PlayerClassement.tsx';
import Void from "../../../Void.astro";

import {
    makeServersMap, pickStatsFor, aggregatePlayers,
    type Server, type PlayerStats
} from "../../../../utils/statsPalworld";

const {jeu} = Astro.props;

// Fetch des serveurs depuis l’API
const res = await fetch("https://otterlyapi.antredesloutres.fr/api/serveurs");
const servers: Server[] = (await res.json()).data ?? [];

// Catégorisation des serveurs
// - "activeGlobalServers" → serveurs globaux actifs (global = 1, actif = 1)
// - "inactiveGlobalServers" → serveurs globaux inactifs (global = 1, actif = 0)
// - "partnerServers" → serveurs qui ne sont pas globaux (global = 0) ou explicitement tagués "partner"
const activeGlobalServers = servers.filter(
    s => s.global === 1 && s.actif === 1 && s.jeu.toLowerCase() === jeu.toLowerCase()
);
const inactiveGlobalServers = servers.filter(
    s => s.global === 1 && s.actif === 0 && s.jeu.toLowerCase() === jeu.toLowerCase()
);
const partnerServers = servers.filter(
    s => (s.global === 0 || (s.type?.toLowerCase() === 'partner')) && s.jeu.toLowerCase() === jeu.toLowerCase()
);

// Construction de maps pour chaque catégorie de serveurs
const serversListActiveGlobal = makeServersMap(activeGlobalServers);
const serversListInactiveGlobal = makeServersMap(inactiveGlobalServers);
const serversListPartner = makeServersMap(partnerServers);

// Fetch des statistiques de joueurs depuis l’API, on stocke le tableau de résultats bruts dans "playersRaw".
const resStats = await fetch("https://otterlyapi.antredesloutres.fr/api/palworld/stats");
const playersRaw = (await resStats.json()).data ?? [];

// Regroupement des statistiques par serveur
const groupedStats: Record<string, PlayerStats[]> = {};
playersRaw.forEach((entry: any) => {
    const serverId = (entry.serveur_id ?? '').toString();

    // Normalisations des données reçues en construisant un PlayerStats typé
    const playerStats: PlayerStats = {
        serveur_playername: entry.serveur_playername,
        compte_id: entry.compte_id,
        tmps_jeu: entry.tmps_jeux,
        nb_mort: entry.nb_mort,
        nb_kills: entry.nb_kills,
        nb_pal_catch: entry.nb_pal_catch,
        nb_boss_kill: entry.nb_boss_kill,
        nb_tower_win: entry.nb_tower_win,
    };

    // Si ce serveur n’a pas encore de tableau de joueurs, on l’initialise
    if (!groupedStats[serverId]) groupedStats[serverId] = [];

    // Ajoutdu joueur dans le tableau du serveur correspondant
    groupedStats[serverId].push(playerStats);
});


// Création des stats par catégorie de serveurs
const statsActiveGlobal = pickStatsFor(serversListActiveGlobal, groupedStats);
const statsInactiveGlobal = pickStatsFor(serversListInactiveGlobal, groupedStats);
const statsPartner = pickStatsFor(serversListPartner, groupedStats);


// Agrégation totale (stats de tous serveurs confondus)
const TOTAL_SERVER_ID = ""; // "" = toutes les stats

const aggregatedAllStats = aggregatePlayers(Object.values(groupedStats).flat());

// Fusion de toutes les stats (actifs, inactifs, partenaires)
const statsActiveGlobalWithTotal = {
    ...statsActiveGlobal,
    ...statsInactiveGlobal,
    ...statsPartner,
    [TOTAL_SERVER_ID]: aggregatedAllStats
};
---

<PlayerClassementReactComposant
        client:load

        serversListActiveGlobal={serversListActiveGlobal}
        serversListInactiveGlobal={serversListInactiveGlobal}
        serversListPartner={serversListPartner}

        statsAllServer={statsActiveGlobalWithTotal}
/>
