---
import Image from "astro/components/Image.astro";

type CarrouselImage = {
    id: number,
    nom: string,
    origine: string,
    auteur: string,
    path: string,
    jeu: string,
};

// Fonction de mélange
const shuffleArray = (array: any[]) => {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
};

let minecraftImages: CarrouselImage[] = [];
let palworldImages: CarrouselImage[] = []

try {
    const res = await fetch("https://otterlyapi.antredesloutres.fr/api/astroloutre/images");
    if (!res.ok) throw new Error(`Erreur réseau: ${res.status}`);

    const json = await res.json();
    const images: CarrouselImage[] = json.data;

    // Filtrer uniquement les images du jeu Minecraft
    minecraftImages = images
        .filter(img => img.jeu.toLowerCase() === "minecraft")
        .map(img => ({
            id: img.id,
            nom: img.nom,
            auteur: img.auteur,
            origine: img.origine,
            path: img.path,
            jeu: img.jeu
        }));

    palworldImages = images
        .filter(img => img.jeu.toLowerCase() === "palworld")
        .map(img => ({
            id: img.id,
            nom: img.nom,
            auteur: img.auteur,
            origine: img.origine,
            path: img.path,
            jeu: img.jeu
        }));

} catch (error) {
    console.error("Erreur lors de la récupération des images :", error);
}

const games = [
    {
        name: 'Minecraft',
        icon: 'https://www.minecraft.net/content/dam/minecraftnet/franchise/logos/Homepage_Download-Launcher_Creeper-Logo_500x500.png',
        logo: 'https://www.minecraft.net/content/dam/minecraftnet/games/minecraft/logos/Global-Header_MCCB-Logo_300x51.svg',
        slides: shuffleArray(minecraftImages),
        buttons: {
            servers: {
                title: "Nos serveurs",
                link: "/serveurs/minecraft"
            },
            classement: {
                title: "Classements",
                link: "/classements/minecraft"
            }
        }
    },
    {
        name: 'Palworld',
        icon: 'https://media.pcgamesinsider.biz/2024/1/125206/palworld-r225x225.jpg',
        logo: 'https://static.wixstatic.com/media/f8429d_3dc22015906f4c1e98dfc6e1d97267f0~mv2.png/v1/fill/w_980,h_337,al_c,q_85,usm_0.66_1.00_0.01,enc_avif,quality_auto/f8429d_3dc22015906f4c1e98dfc6e1d97267f0~mv2.png',
        slides: shuffleArray(palworldImages),
        buttons: {
            servers: {
                title: "Nos serveurs",
                link: "/serveurs/palworld"
            }
        }
    }
];
---
<div class="w-full">
    <div id="container-carrousel" class="w-full">

        <!-- MAP : Pour chaque jeu dans la variables games -->
        {games.map((game, i) => (

                <div class="carrousel-game w-screen hidden overflow-hidden"
                     data-game={i}>

                    <!-- Image de fond du carrousel -->
                    <div class="relative w-screen md:h-screen h-120 overflow-hidden" id={`carousel-${i}`}>
                        {game.slides.map((src, j) => (
                                <Image
                                        src={src.path}
                                        alt={`${game.name} slide ${j + 1}`}
                                        class={`carousel-slide absolute top-0 left-0 w-screen h-full object-cover 
                                        transition-all duration-500 ease-in-out opacity-0 scale-105 translate-x-4`}
                                        id="carousel-slide"
                                        loading="lazy"
                                        width={100}
                                        height={100}
                                />
                                <div class="carousel-auteur absolute bottom-4 left-4 text-white text-sm opacity-0 transition-opacity duration-500">
                                    {src.auteur}
                                </div>
                        ))}

                        <!-- Container Logo des jeux -->
                        <div class="flex justify-center w-full">
                            <div class="bg-gradient-to-r from-brown-900/80 to-brown-700/80 text-white p-6 rounded-xl
                            absolute top-2/5 transform -translate-y-1/2 transition-all duration-500 opacity-0">

                                <Image src={game.logo} alt={game.name} class="w-100 h-100 object-contain"
                                       width={100} height={100}/>

                            </div>
                        </div>

                        <!-- Container Icone des jeux -->
                        <div class="absolute md:top-2/4 top-2/3 transform -translate-y-1/2 flex justify-center w-full gap-8">
                            {games.map((g, idx) => (
                                    <div
                                            class={`game-icon text-6xl cursor-pointer transform transition duration-300`}
                                            data-index={idx}
                                    >

                                        <!-- Icone des jeux -->
                                        <Image
                                                src={g.icon}
                                                alt={g.name}
                                                class="w-16 h-16 object-contain rounded-lg shadow-lg hover:shadow-2xl transition-all duration-300"
                                                width={100}
                                                height={100}
                                        />
                                    </div>
                            ))}
                        </div>

                        <!-- Boutons -->
                        <div class="absolute md:top-[65%] top-[80%] transform -translate-y-1/2 w-full flex justify-center gap-6 z-10">
                            {Object.values(game.buttons).map((btn) => (
                                    <a
                                            href={btn.link}
                                            class="text-white border border-white/90 font-semibold py-2 px-6 rounded-lg shadow-md backdrop-blur-md transition-all duration-300 hover:bg-white/10"
                                    >
                                        {btn.title}
                                    </a>
                            ))}
                        </div>

                    </div>
                </div>
        ))}
    </div>
</div>

<script type="module">
    let intervals = [];

    window.addEventListener("DOMContentLoaded", () => {
        const carousels = document.querySelectorAll('.carrousel-game');
        const icons = document.querySelectorAll('.game-icon');

        const clearIntervals = () => {
            intervals.forEach(clearInterval);
            intervals = [];
        };

        const showCarousel = (carousel, direction = 'right') => {
            carousel.classList.remove('hidden');
            const slides = carousel.querySelectorAll('.carousel-slide');
            const slidesAuteurs = carousel.querySelectorAll('.carousel-auteur');
            const titleContainer = carousel.querySelector('.bg-gradient-to-r');

            slides.forEach((slide, i) => {
                // Reset all slides
                slide.classList.remove(
                    'opacity-100', 'scale-100', 'translate-x-0',
                    'opacity-0', 'scale-105', 'translate-x-4', '-translate-x-4'
                );
                slide.classList.add('opacity-0', 'scale-105', direction === 'right' ? 'translate-x-4' : '-translate-x-4');
            });

            // Show first slide
            setTimeout(() => {
                slides[0].classList.remove('opacity-0', 'scale-105', 'translate-x-4', '-translate-x-4');
                slides[0].classList.add('opacity-100', 'scale-100', 'translate-x-0');

                if (slidesAuteurs[0]) {
                    slidesAuteurs[0].classList.remove('opacity-0');
                    slidesAuteurs[0].classList.add('opacity-100');
                }

            }, 50);

            if (titleContainer) {
                setTimeout(() => {
                    titleContainer.style.opacity = '1';
                    titleContainer.style.transform = 'translateY(0)';
                }, 300);
            }

            startCarousel(carousel); // start the carousel after it's shown
        };

        const hideCarousels = (direction) => {
            carousels.forEach(carousel => {
                const slides = carousel.querySelectorAll('.carousel-slide');
                const titleContainer = carousel.querySelector('.bg-gradient-to-r');

                slides.forEach(slide => {
                    slide.classList.remove('opacity-100', 'scale-100', 'translate-x-0');
                    slide.classList.add('opacity-0', 'scale-105', direction === 'right' ? '-translate-x-4' : 'translate-x-4');
                });

                if (titleContainer) {
                    titleContainer.style.opacity = '0';
                    titleContainer.style.transform = 'translateY(-20px)';
                }

                setTimeout(() => {
                    carousel.classList.add('hidden');
                }, 300);
            });
        };

        const switchToGame = (gameIndex, currentCarousel) => {
            if (currentCarousel === carousels[gameIndex]) return;

            const direction = gameIndex > parseInt(currentCarousel.dataset.game) ? 'right' : 'left';

            clearIntervals();
            hideCarousels(direction);

            setTimeout(() => {
                showCarousel(carousels[gameIndex], direction);
            }, 300);
        };

        icons.forEach((icon) => {
            icon.addEventListener('click', (e) => {
                const gameIndex = parseInt(e.currentTarget.dataset.index);
                const currentCarousel = document.querySelector('.carrousel-game:not(.hidden)');
                switchToGame(gameIndex, currentCarousel);
            });
        });

        const startCarousel = (carousel) => {
            const slides = carousel.querySelectorAll('.carousel-slide');
            const auteurs = carousel.querySelectorAll('.carousel-auteur');
            if (slides.length < 2) return;

            let current = 0;

            const interval = setInterval(() => {
                // Masquer l'ancienne image et son auteur
                slides[current].classList.remove('opacity-100', 'scale-100', 'translate-x-0');
                slides[current].classList.add('opacity-0', 'scale-105', 'translate-x-4');

                if (auteurs[current]) {
                    auteurs[current].classList.remove('opacity-100');
                    auteurs[current].classList.add('opacity-0');
                }

                current = (current + 1) % slides.length;

                // Afficher la nouvelle image et son auteur
                setTimeout(() => {
                    slides[current].classList.remove('opacity-0', 'scale-105', 'translate-x-4');
                    slides[current].classList.add('opacity-100', 'scale-100', 'translate-x-0');

                    if (auteurs[current]) {
                        auteurs[current].classList.remove('opacity-0');
                        auteurs[current].classList.add('opacity-100');
                    }
                }, 50);
            }, 5000);

            intervals.push(interval);
        };


        // Init style for all titles
        document.querySelectorAll('.bg-gradient-to-r').forEach(container => {
            container.style.transition = 'all 0.5s ease-out';
            container.style.transform = 'translateY(-20px)';
            container.style.opacity = '0';
        });

        // Show first carousel
        showCarousel(carousels[0], 'right');
    });
</script>
