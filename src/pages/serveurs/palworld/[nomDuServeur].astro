---
import {slugify} from "../../../components/serveurs/serveurFormater";
import Layout from "../../../layouts/Layout.astro";
import Banner from "../../../components/Banner.astro";
import Image from "astro/components/Image.astro";
import Void from "../../../components/Void.astro";

// Type du serveur
type ServeurType = {
    id: number,
    nom: string,
    jeu: string,
    version: string,
    modpack: string,
    modpack_url: string,
    nom_monde: string,
    embed_color: string,
    actif: boolean,
    global: boolean,
    image: string,
    description: string,
    contenaire: string,
    type: string,
    ip: string
};

type PlayTimeType = {
    serveur_id: number;
    total_hours: number;
}

// Le serveur est passé via getStaticPaths → props
const serveur: ServeurType | undefined = Astro.props.serveur;
const playTime: number | undefined = Astro.props.playTime;
const statutServeur: string | undefined = Astro.props.statutServeur;


// Génération des routes statiques pour chaque serveur
export async function getStaticPaths() {

    // On récupère la liste des serveurs
    const apiUrl = 'https://otterlyapi.antredesloutres.fr/api/serveurs/actif-global/palworld';
    const response = await fetch(apiUrl);

    if (!response.ok) {
        throw new Error(`Failed to fetch servers: ${response.status}`);
    }

    const json = await response.json();

    // On vérifie si la requête est un succès
    if (!json.success) return

    // On récupère les informations dans les Data
    const serveurs = json.data ?? json;

    if (!Array.isArray(serveurs)) {
        throw new Error("Serveurs is not an array");
    }

    // On récupère le temps de jeu pour chaque serveur
    const apiUrlPlayTimePerServeur = "https://otterlyapi.antredesloutres.fr/api/joueurs/stats-serveur/serveurs-total-playtime-per-server"
    const responsePlayTimePerServeur = await fetch(apiUrlPlayTimePerServeur);

    if (!responsePlayTimePerServeur.ok) {
        throw new Error(`Failed to fetch servers: ${response.status}`);
    }

    const jsonPlayTimePerServeur = await responsePlayTimePerServeur.json();

    // On vérifie si la requête est un succès
    if (!jsonPlayTimePerServeur.success) return

    const playTimes : PlayTimeType[] = jsonPlayTimePerServeur.data;

    return serveurs.map((serveur) => {        let ip: string;
        if (serveur.jeu === "Palworld") {
            ip = "antredesloutres.fr:8211"
        } else if (serveur.type === "primary") {
            ip = "antredesloutres.fr"
        } else {
            ip = "secondaire.antredesloutres.fr"
        }
        serveur.ip = ip

        const playTime = playTimes.find(pt => pt.serveur_id === serveur.id);

        const statutServeur = serveur?.actif === 1
            ? "Le serveur est actif"
            : serveur?.actif === 0
                ? "Le serveur est désactivé"
                : "Statut inconnu";

        return {
            params: {
                nomDuServeur: slugify(serveur.nom),
            },
            props: {
                serveur,
                statutServeur,
                playTime: playTime ? playTime.total_hours : undefined,
            },
        };
    });
}
---
<Layout>
    <script is:inline>
        document.addEventListener("DOMContentLoaded", () => {
            const buttons = document.querySelectorAll(".button-copy");

            buttons.forEach((button) => {
                button.addEventListener("click", () => {
                    const ip = button.getAttribute("data-ip");
                    navigator.clipboard.writeText(ip).then(() => {
                        const span = button.querySelector("span");
                        const originalText = span.textContent;
                        span.textContent = "IP copié !";
                        setTimeout(() => {
                            span.textContent = originalText;
                        }, 2000);
                    });
                });
            });
        });
    </script>

    {!serveur && <h1>Serveur introuvable</h1>}
    {serveur && (
        <Banner bannerUrl=`/banner/palworld/${slugify(serveur.nom)}.webp`/>
        <div class="profile-container">
            <div class="page-title">
                <p>{serveur.nom}</p>
                <img
                    src="https://cdn2.steamgriddb.com/logo/4b097c4acf20a16a88d18dd1aa5c8a69.png"
                    alt="minecraft logo"
                    class="h-25 inline-block mt-1 max-w-full"
                    style="transform: translateY(-20px);"
                />
            </div>

            <h1>Information du serveur <span class="golden">{serveur.nom}</span></h1>
            <div class="profile-details">
                <div class="avatar">
                    <img src={serveur.image} alt={`Image du serveur`} style="display: inline; height: 21em;" />
                </div>

                <div class="info-grid">
                    <h2>Informations</h2>
                    <div>
                        <label style="font-weight: bold; display: flex; align-items: center; gap: 6px;">
                            {/* Icône ID */}
                            <svg xmlns="http://www.w3.org/2000/svg" style={{ color: serveur.embed_color }} class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            IP du serveur :
                        </label>
                        <input
                            type="text"
                            value={serveur.ip}
                            readonly
                            onclick="this.select()"
                            style="margin-top: 4px; width: 100%; padding: 4px 8px; border: 1px solid #ccc; border-radius: 4px; font-family: monospace;"
                        />
                    </div>

                    <div>
                            <svg xmlns="http://www.w3.org/2000/svg" style={{ color: serveur.embed_color }} class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        Modpack :
                    </div>
                    <p>
                        <a
                                href={serveur.modpack_url}
                                target="_blank"
                                rel="noreferrer"
                                class="modpack-link"
                                style={{ color: serveur.embed_color }}
                        >
                            {serveur.modpack}
                        </a>
                    </p>

                    <div>
                        <svg xmlns="http://www.w3.org/2000/svg" style={{ color: serveur.embed_color }} class="icon" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="18" height="18">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 00.6-9.95A7 7 0 003 13.5V15z" />
                        </svg>
                        {statutServeur}
                    </div>

                </div>

                <div class="info-grid">
                    <h2>Action</h2>
                    <button
                        class="button-copy"
                        data-ip={serveur.ip}>
                        <img src="https://paldex.io/cdn-cgi/image/format=auto,width=300/images/pal-icons/T_ChickenPal_icon_normal.png" alt="Copier IP" />
                        <span>Copier l'IP</span>
                    </button>
                    <a class="button-namemc" href={serveur.modpack_url} target="_blank" rel="noreferrer">
                        <img src="https://oyster.ignimgs.com/mediawiki/apis.ign.com/palworld/8/80/T_NegativeKoala_icon_normal.png" alt="PalworldOffi" />
                        Télécharger le jeu/modpack
                    </a>
                    <a class="button-namemc" href="https://www.pocketpair.jp/palworld" target="_blank" rel="noreferrer">
                        <img src="https://media.pcgamesinsider.biz/2024/1/125206/palworld-r225x225.jpg" alt="PalworldOffi" />
                        Site officiel de Palworld
                    </a>
                    <a class="button-namemc" href="https://palworld.gg/" target="_blank" rel="noreferrer">
                        <img src="https://palworld.gg/favicon-32x32.png" alt="PalworldOffi" />
                        Palworld.gg
                    </a>
                </div>
            </div>

            <h1>
                Joueurs {' '}
                <span class="inline-image">
                    <Image src="https://cdn2.steamgriddb.com/logo/4b097c4acf20a16a88d18dd1aa5c8a69.png" alt="Palword" width={2000} height={1000} />
                </span>
                {' '} ayant rejoint le serveur
            </h1>
            <Void />

            <h1>Screenshot des joueurs sur le serveur <span class="golden">{serveur.nom}</span></h1>
            <Void />

        </div>
    )}

    <style>
        .icon {
            display: inline;
            vertical-align: middle;
            margin-right: 6px;
            filter: brightness(80%);
        }

        .modpack-link {
            font-weight: bold;
            transition: color 0.3s ease;
            filter: brightness(80%);
        }

        .modpack-link:hover {
            filter: brightness(50%);
        }

        .profile-container {
            background: rgba(255 255 255 / 0.1);
            border-radius: 10px;
            text-align: center;
            font-family: Arial, sans-serif;
        }

        .profile-container h1 {
            background-color: #333;
            color: white;
            width: 100%;
            padding: 1rem;
            font-size: 1.8rem;
            font-weight: bold;
        }
        @media (max-width: 350px) {
            .profile-container h1 {
                font-size: 1.25rem;
            }
        }

        h2 {
            font-size: 1.2rem;
            font-weight: bold;
            text-align: center;
        }

        .inline-image {
            display: inline-block;
            vertical-align: baseline;
            line-height: 1;
        }

        .inline-image img {
            display: inline;
            height: 1.2em;
            width: auto;
            vertical-align: middle;
            transform: translateY(-5px);
        }

        .page-title {
            margin-top: 50px;
            margin-bottom: 50px;
            align-items: center;
            display: flex;
            flex-direction: column;
        }
        .page-title {
            font-weight: bolder;
            font-size: 2.5rem;
        }
        @media (max-width: 768px) {
            .page-title {
                margin-top: 15px;
                margin-bottom: 15px;
            }
        }

        .golden  {
            animation: colorShift 3s ease-in-out infinite;
        }
        @keyframes colorShift {
            0%   { color: #FFDDA0; }
            33%  { color: #FFB347; }
            66%  { color: #FF8C42; }
            100% { color: #FFDDA0; }
        }.profile-details {
             display: grid;
             grid-template-columns: 1fr 0.8fr 0.8fr;
             gap: 1rem;
             align-items: flex-start;
             justify-items: center;
             padding: 2rem;
             background-color: snow;
         }

        .avatar, .info-grid {
            width: 100%;
        }
        @media (max-width: 768px) {
            .profile-details {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .info-grid {
                text-align: center;
            }
        }

        .avatar {
            margin-bottom: 1rem;
        }

        .avatar img {
            max-height: 100%;
            height: 20%;
            border-radius: 8px;
        }

        .info-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1rem;
            font-size: 0.9rem;
            text-align: left;
        }

        .back-link {
            margin-top: 1rem;
            margin-bottom: 1rem;
            text-align: center;
        }

        .back-link a {
            color: #1e40af;
            text-decoration: none;
        }

        .back-link a:hover {
            text-decoration: underline;
        }

        .button-copy,
        .button-namemc {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background-color: #white;
            color: #000;
            padding: 0.5rem 1rem;
            margin: 0.25rem;
            border: 2px solid #000;
            border-radius: 5px;
            text-decoration: none;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-weight: bold;
            font-size: 0.9rem;
            text-align: center;
        }

        .button-copy img,
        .button-namemc img {
            width: 24px;
            height: 24px;
            border-radius: 4px;
        }

        .button-copy:hover,
        .button-namemc:hover {
            background-color: #000;
            color: #fff;
            border: 2px solid #333;
            animation: colorShift 3s ease-in-out infinite;
        }
    </style>
</Layout>